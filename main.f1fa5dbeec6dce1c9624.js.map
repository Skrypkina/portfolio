{"version":3,"sources":["webpack:///./index.js"],"names":["slides","document","querySelectorAll","prevStep","querySelector","nextStep","dots","addEventListener","clearInterval","intervalId","slider","showPrevSlide","showNextSlide","constructor","options","this","slideArray","slideArr","dotArray","dotArr","currentIdx","hide","style","display","classList","add","forEach","slide","remove","length","showSlides","setInterval","name","age","projects","dicegame","students","city","student","console","log","Player","country","getPlayerInfo","super","getPlayerAge","Promise","resolve","reject","setTimeout","getUserData","fetch","method","body","JSON","stringify","postId","email","then","res","ok","json","Error","statusText","apiUrl","async","getJoke","exampleSet","Set","delete","size","has","clear","total","args","reduce","arg","counter","getSum","x","a","y","b","z","c","one","two","array","newList","removeFromList","gender","createPerson","i","toFixed","Math","sqrt","pow","min","max","abs","floor","trunc","ceil","round","random","logPerson","s","toUpperCase","toLowerCase","charAt","indexOf","startsWith","endsWith","output","output2","person","key","hasOwnProperty","creature","logKeys","info","Object","keys","logWithParams","top","between","bottom","index","logPersons","job","call","apply","dir","textContent","bind","obj","fn","Component","selector","$el","show","Box","width","height","backgroundColor","color","box1","borderRadius","delay","ms","url","response","e","error","fetchAsyncTodos","dataInfo","proxyLarysa","Proxy","get","target","prop","set","value","includes","deleteProperty","text","thisArg","fnproxy","construct","t","str","strGenerator","next","num","n","numberGen","iter","ocupation","entries","map","Map","NaN","mapArray","mapObj","fromEntries","users","visitsMap","user","Date","getTime","uniqueValues","weakObj","newMap","WeakMap","cashe","casheUser","now","lena","users1","visit","WeakSet","splice","headers","sendRequest","data","catch","err","adress","getAddress","toString","filter","join","acc","symbol","Symbol","anotherSimbol","objec","addAll","num2","addFive"],"mappings":"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","file":"main.f1fa5dbeec6dce1c9624.js","sourcesContent":["import \"./sass/style.scss\";\n\n(\"use strict\");\n\n// slider\nconst slides = document.querySelectorAll(\"[ data-slides ]\");\nconst prevStep = document.querySelector(\"[ data-prev ]\");\nconst nextStep = document.querySelector(\"[ data-next ]\");\nconst dots = document.querySelectorAll(\"[ data-dots ]\");\n\nprevStep.addEventListener(\"click\", handlePrevBtnClick);\nnextStep.addEventListener(\"click\", handleNextBtnClick);\n\n// class Slider {\n//   constructor(options) {\n//     this.slideArray = options.slideArr;\n//     this.dotArray = options.dotArr;\n//   }\n//   findCurrItem() {\n//     return this.slideArray.find((slide) => slide.classList.contains(\"current\"));\n//     // return this.slideArray.find((slide) => slide.hasAttribute(\"data-active\"));\n//   }\n//   findCurrIdx(currentItem) {\n//     return this.slideArray.indexOf(currentItem);\n//   }\n\n//   addActiveClass(currentIdx) {\n//     this.dotArray[currentIdx].classList.add(\"active\");\n//   }\n//   removeItem(currentIdx) {\n//     this.slideArray[currentIdx].classList.remove(\"current\");\n//     this.dotArray[currentIdx].classList.remove(\"active\");\n//   }\n//   addItem(currentIdx) {\n//     this.slideArray[currentIdx].classList.add(\"current\");\n//     this.dotArray[currentIdx].classList.add(\"active\");\n//   }\n\n//   showSlides(currentIdx) {\n//     const id = setInterval(() => {\n//       this.removeItem(currentIdx);\n//       currentIdx++;\n//       if (currentIdx > this.slideArray.length - 1) {\n//         currentIdx = 0;\n//       }\n//       this.addItem(currentIdx);\n//     }, 3000);\n//     return id;\n//   }\n// }\n\n// const slider = new Slider({\n//   slideArr: [...slides],\n//   dotArr: [...dots],\n// });\n\n// const currItem = slider.findCurrItem();\n// let currIdx = slider.findCurrIdx(currItem);\n// slider.addActiveClass(currIdx);\n// const intervalId = slider.showSlides(currIdx);\n\n// functions\n\n// function handlePrevBtnClick() {\n//   clearInterval(intervalId);\n//   const item = slider.findCurrItem();\n//   let idx = slider.findCurrIdx(item);\n//   slider.removeItem(idx);\n//   idx--;\n//   if (idx < 0) {\n//     idx = slider.slideArray.length - 1;\n//   }\n//   slider.addItem(idx);\n// }\n\n// function handleNextBtnClick() {\n//   clearInterval(intervalId);\n//   const item = slider.findCurrItem();\n//   let idx = slider.findCurrIdx(item);\n//   slider.removeItem(idx);\n//   idx++;\n//   if (idx > slider.slideArray.length - 1) {\n//     idx = 0;\n//   }\n//   slider.addItem(idx);\n// }\n\n//================================\nclass Slider {\n  constructor(options) {\n    this.slideArray = options.slideArr;\n    this.dotArray = options.dotArr;\n    this.currentIdx = options.currentIdx;\n  }\n  hide() {\n    this.slideArray[this.currentIdx].style.display = \"block\";\n    this.dotArray[this.currentIdx].classList.add(\"active\");\n    this.slideArray.forEach((slide) => {\n      if (slide !== this.slideArray[this.currentIdx]) {\n        slide.style.display = \"none\";\n      }\n    });\n  }\n  showNextSlide() {\n    this.dotArray[this.currentIdx].classList.remove(\"active\");\n    this.slideArray.forEach((slide) => (slide.style.display = \"none\"));\n    this.currentIdx++;\n    if (this.currentIdx > this.slideArray.length - 1) {\n      this.currentIdx = 0;\n    }\n    this.slideArray[this.currentIdx].style.display = \"block\";\n    this.dotArray[this.currentIdx].classList.add(\"active\");\n  }\n  showPrevSlide() {\n    this.dotArray[this.currentIdx].classList.remove(\"active\");\n    this.slideArray.forEach((slide) => (slide.style.display = \"none\"));\n    this.currentIdx--;\n    if (this.currentIdx < 0) {\n      this.currentIdx = slider.slideArray.length - 1;\n    }\n    this.slideArray[this.currentIdx].style.display = \"block\";\n    this.dotArray[this.currentIdx].classList.add(\"active\");\n  }\n  showSlides() {\n    return setInterval(() => {\n      this.showNextSlide();\n    }, 3000);\n  }\n}\n\nconst slider = new Slider({\n  slideArr: [...slides],\n  dotArr: [...dots],\n  currentIdx: 0,\n});\nslider.hide();\nconst intervalId = slider.showSlides();\n\nfunction handlePrevBtnClick() {\n  clearInterval(intervalId);\n  slider.showPrevSlide();\n}\n\nfunction handleNextBtnClick() {\n  clearInterval(intervalId);\n  slider.showNextSlide();\n}\n\n//================================\n\n// distructure object, arrays the same, only in []\n\nconst student = {\n  name: \"Kally\",\n  age: 24,\n  projects: {\n    dicegame: \"lalala\",\n  },\n};\n\nconst {\n  name,\n  age,\n  projects: { dicegame },\n} = student;\n// console.log(name);\n// console.log(age);\n// console.log(dicegame);\n\nfunction addressMaker({ city, state }) {\n  const newAdress = { city, state, country: \"United States\" };\n  return newAdress;\n}\n// const x = addressMaker({ city: \"Austin\", state: \"Texas\" });\n// console.log(x);\n\nconst students = [\n  { name: \"Mark\", city: \"New York\" },\n  { name: \"Den\", city: \"Kiev\" },\n  { name: \"Alex\", city: \"Dnepr\" },\n];\n\nfor (const student of students) {\n  const { name, city } = student;\n  console.log(`${name} lives in ${city}`);\n}\n\nlet example = \"Larysa\";\n\n// complites the string to a value 10 letters and include empty spaces if it is several words\n// console.log(example.padStart(10, \"a\"));\n// console.log(example.padEnd(10, \"b\"));\n\n// classes\nclass Player {\n  constructor(name, country) {\n    this.name = name;\n    this.country = country;\n  }\n  getPlayerInfo() {\n    console.log(`${this.name} was born in ${this.country}`);\n  }\n}\n\nclass TennisPlayer extends Player {\n  constructor(name, country, age) {\n    super(name, country);\n    this.age = age;\n  }\n  getPlayerAge() {\n    console.log(\n      `${this.name} is ${this.age} years old and knows how to play tennis`\n    );\n  }\n}\n\nconst ronaldo = new TennisPlayer(\"Ronaldo\", \"Spain\", 38);\n\n// ronaldo.getPlayerAge();\n// ronaldo.getPlayerInfo();\n\n// promises\n\nconst buyFlightTicket = () => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const error = false;\n      if (error) {\n        reject(\"sorry\");\n      } else {\n        resolve(\"thank you\");\n      }\n    }, 3000);\n  });\n};\n\n// buyFlightTicket()\n//   .then((success) => console.log(success))\n//   .catch((error) => console.log(error));\n\nconst getUserData = () => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const error = false;\n      if (error) {\n        reject(\"sorry, the user not found\");\n      } else {\n        resolve(\"user is Den, email is Den@co.il\");\n      }\n    }, 3000);\n  });\n};\n\ngetUserData();\n// .then((success) => console.log(success))\n// .catch((error) => console.log(error));\n\n// fetch\n\n// fetch(\"https://jsonplaceholder.typicode.com/comments/1\")\n//   .then((res) => {\n//     if (res.ok) return res.json();\n//     throw new Error(`Error while fetching ${res.statusText}`);\n//   })\n//   .then((data) => console.log(data))\n//   .catch((error) => console.log(error));\n\nfetch(\"https://jsonplaceholder.typicode.com/comments\", {\n  method: \"POST\",\n  body: JSON.stringify({\n    postId: 500,\n    name: \"Den\",\n    email: \"Den@co.il\",\n  }),\n  // headers: { \"Content-type\": \"application/json; charset=UTF-8\" },\n}).then((res) => {\n  if (res.ok) return res.json();\n  throw new Error(`Error while fetching ${res.statusText}`);\n});\n// .then((data) => console.log(data))\n// .catch((err) => console.log(err));\n\n// async await\n\nconst apiUrl = \"https://jsonplaceholder.typicode.com/comments/1\";\n\nasync function getJoke() {\n  const res = await fetch(apiUrl).then((res) => {\n    if (res.ok) return res.json();\n    throw new Error(`Error while fetching ${res.statusText}`);\n  });\n  // const data = await res.json();\n  console.log(res);\n}\n\ngetJoke();\n\n// set\n\nconst exampleSet = new Set([1, 1, 1, 1, 2, 2, 2]);\nexampleSet.add(5).add(9);\nexampleSet.delete(5); // return boolean true ore false\nconsole.log(exampleSet.size);\nconsole.log(exampleSet.has(1));\nexampleSet.clear();\nconsole.log(exampleSet.size);\n\n// higher oder arrow functions (map, filter and reduce)\n// higher oder function takes another fanctions for arguments\n\n/*\nTo collect variables into array use (...args)\n*/\nlet total = 0;\nfunction getSum(...args) {\n  total = args.reduce((arg, counter) => arg + counter, 0);\n  return total;\n}\n\ngetSum(2, 4, 7);\n\nconsole.log(total);\n\n// destructuring object\n\nconst voxel = {\n  x: 3,\n  y: 4.5,\n  z: 8,\n};\n\nconst { x: a, y: b, z: c } = voxel;\nconsole.log(a, b, c);\n\n// in arrays\nconst array = [1, 2, 3, 4];\nconst [one, , , two] = array;\n\nconsole.log(one, two);\n\n// return the array with first 2 elements missing\n\nconst list = [\"potato\", \"onians\", \"tomato\", \"cucamber\"];\n\nfunction removeFromList(array) {\n  const [, , ...newList] = array;\n  return newList;\n}\n\nconsole.log(removeFromList(list));\n\n// shotter way to wright function that returns an object\n\n// const createPerson = (name, age, gender) => {\n//   const person = {\n//     name,\n//     age,\n//     gender,\n//   };\n//   return person;\n// };\n\nconst createPerson = (name, age, gender) => ({ name, age, gender });\nconsole.log(createPerson(\"den\", 35, \"male\"));\n\n//difference bitween var ES5 and let&const ES6\nvar string = \"yes\";\nvar string = \"no\"; // can declear twice and the will be no in console\nconsole.log(string);\n\nfunction checkScope() {\n  var i = \"function scope\";\n  if (true) {\n    i = \"block scope\";\n    console.log(\"block scope\", i); //block scope\n  }\n  console.log(\"function scope\", i); //block scope and not function scope\n}\n/*\nif comment  var i = \"function scope\"; in function scope console we\nstill will see block scope\n*/\ncheckScope();\n\n// for loop in ES6\n/*\nfor (let car of cars) {\n  console.log(car);\n}\n*/\n\n//toFixed(2) method that returns 2 numbers after integer\nconsole.log(+(0.4 + 0.2).toFixed(2)); // but it is string, + in the beggining convert to a number\n\n/*\nBigInt новый тип данных, который ввели, чтобы работать с числами,\nбольшими, чем Number.MAX_SAFE_INTEGER\nК этому числу дописываем числа и n в конце и число становится BigInt, который \nработает с другими BigInt. Здесь в вэбпак это не поддерживается и нельзя\nвывести в консоль\n*/\n// console.log(9007199254740991);\n\n// Math\nconsole.log(Math.sqrt(25)); //квадратный корень\n// вычисления возведение в степень\nconst x = Math.pow(2, 4);\nconsole.log(x);\n//брать модуль числа- отсекает негативную часть и берет модуль\nconsole.log(Math.abs(-42));\n//взять максимальное число или минимальное число\nconsole.log(Math.max(2, 6, 44));\nconsole.log(Math.min(2, 6, 44));\n//округляет в меньшую сторону\nconsole.log(Math.floor(4.9));\nconsole.log(Math.trunc(4.9));\n//или в большую\nconsole.log(Math.ceil(4.9));\nconsole.log(Math.round(4.9));\nMath.random();\n\nfunction getNumber(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\nconsole.log(getNumber(3, 8));\n\n//strings\nconst firstName = \"Larysa\";\nconsole.log(firstName.toUpperCase());\nconsole.log(firstName.toLowerCase());\nconsole.log(firstName.charAt(3));\nconsole.log(firstName.indexOf(\"ry\"));\nconsole.log(firstName.startsWith(\"L\"));\nconsole.log(firstName.endsWith(\"y\"));\n\n//new in functions\n\nfunction logPerson(s, name, age) {\n  console.log(s);\n  console.log(name);\n  console.log(age);\n  //мы можем теперь валидировать\n  if (age > 40) {\n    age = \"not yet\";\n  }\n  return `${s[0]} ${name}${s[1]} ${age}`;\n}\nconst personName = \"Larysa\";\nconst personAge = 35;\nconst personName2 = \"Den\";\nconst personAge2 = 42;\n\nconst output = logPerson`name: ${personName}, age: ${personAge}`;\n//эта строка в параметре-мфссиве s разбивается на 0 элем массива name: , 1 - , age:\nconst output2 = logPerson`name: ${personName2}, age: ${personAge2}`;\nconsole.log(output);\nconsole.log(output2);\n\n// objects\n/*\nперебор объектов в цикле может имеет подвох, так как могут перебираться\nне только ключи самого объекта, но и его предка object\nпоэтому всегда нужно писать проверку\nВ более современных методах Object.keys & Object.values эти проверки делать не \nнадо, так как они перебирают только собственные свойства объекта\n*/\nconst person = {\n  name: \"Ben\",\n  age: 26,\n};\nfor (let key in person) {\n  if (person.hasOwnProperty(key)) console.log(key); // key\n  console.log(person[key]); //value\n}\n/*\nСоздаем в объекте метод, используя контекст, ключнвое слово this- где this и есть\nсам объект\n*/\n\nconst creature = {\n  logKeys() {\n    console.info(Object.keys(this));\n    console.log(this);\n  },\n  logWithParams(top = false, between = false, bottom = false) {\n    if (top) {\n      console.log(\"--------top---------\");\n    }\n    Object.keys(this).forEach((key, index, array) => {\n      console.log(`${key} : ${this[key]}`);\n      if (between && index !== array.length - 1) {\n        console.log(\"--------------------\");\n      }\n    });\n    if (bottom) {\n      console.log(\"--------bottom---------\");\n    }\n  },\n};\n\n// creature.logKeys(); // методом Object.keys мы пробегаем по самому creature\n\n// если в метод передать другой объект, то все равно мы будем пробегать по creature\n// creature.logKeys(person);\n// мы теперь можем пользоваться этим методом, чтобы выводить в консоль любой объект\n\n// метод bind привязывает контекст объекта, который мы передаем навсегда и возвращает\n// новую функцию, после переданного объекта, принимает неограниченное кол-во параметров через запятую\n\n// const newCreature = creature.logKeys.bind(person);\n// newCreature();\n\n// метод call привязывает переданный объект и сразу вызывает функцию, в контексте этого объекта\ncreature.logKeys.call(person);\n\n// если передавать параметры в метод call\n\ncreature.logWithParams.call(person, true, true, true);\n// параметры передаются через запятую после объекта. Метод call принимает неограниченное\n//кол-во параметров, в зависимости, сколько сама функция принимает\n\n// Apply - принимает только 2 параметра: первый- объект, второй массив из тех\n// аргументов, которые нужны для функции\n\ncreature.logWithParams.apply(person, [true, true, true]);\n\n// DOM console.dir(document.querySelector('h1'))\nconsole.dir(prevStep.textContent);\n\n// challenge\n// создать функцию bind, при вызове которой она выводит в консоль данные объекта\nfunction logPersons() {\n  console.log(`Person: ${this.name}, ${this.age}, ${this.job}`);\n}\n\nconst person1 = {\n  name: \"Den\",\n  age: 26,\n  job: \"frontend\",\n  logPersons: logPersons,\n};\nconst person2 = {\n  name: \"Ben\",\n  age: 36,\n  job: \"full stack\",\n};\n\nbind(person1, logPersons)();\nbind(person2, logPersons)();\n\nfunction bind(obj, fn) {\n  return function (...args) {\n    fn.apply(obj, args);\n  };\n}\n//можно и call, но apply позволит в будущем передать любые аргументы\n/*\nClass \n//static properties - доступны только у самого класса Animal.type\nstatic type = 'ANIMAL'\n\nclass Animal {\n  constructor(options) {\n    this.name = options.name,\n    this.age = options.age\n    this.tail  = options.tail\n  }\n  voice() {\n    console.log('wow')\n  }\n}\n\nconst cow = new Animal({\n  name: 'Cow',\n  age: 3,\n  tail: true\n})\n\nклассы удобны для наследования. Доступны методы родительского класса - voice()\nclass Cat extends Animal {\n  constructor(options) {\n    super(options)\n    this.color = options.color\n  }\n  В классе Cat можно переписывать родительские методы\nvoice() {\n    console.log('I am cat')\n    можно вызвать родительский метод\n   super.voice()\n  }\ngetters and setters\n\nget ageInfo() {\n  return this.age * 4\n}\nset ageInfo(newAge) {\n  this.age = newAge\n}\n}\n\nconst cat = new Cat({\n  name: 'Cat',\n  age: 7,\n  tail: true,\n  color: 'black'\n})\ncat.getinfo - не метод, просто поле\n*/\n\nclass Component {\n  constructor(selector) {\n    this.$el = document.querySelector(selector); // приватная переменная\n  }\n  hide() {\n    this.$el.style.display = \"none\";\n  }\n  show() {\n    this.$el.style.display = \"block\";\n  }\n}\n\nclass Box extends Component {\n  constructor(options) {\n    super(options.selector);\n    this.$el.style.width = this.$el.style.height = options.size + \"px\";\n    this.$el.style.backgroundColor = options.color;\n  }\n}\n\nconst box1 = new Box({\n  selector: \"#box1\",\n  size: 100,\n  color: \"red\",\n});\nbox1.hide();\nbox1.show();\n\nclass Circle extends Box {\n  constructor(options) {\n    super(options);\n    this.$el.style.borderRadius = \"50%\";\n  }\n}\n\nconst circle = new Circle({\n  selector: \"#circle\",\n  size: 90,\n  color: \"green\",\n});\n\n// async await\n\nconst delay = (ms) => {\n  return new Promise((resolve) =>\n    setTimeout(() => {\n      resolve();\n    }, ms)\n  );\n};\n\n// delay(2000).then(() => console.log(\"after 2 sec\"));\n\nconst url = \"https://jsonplaceholder.typicode.com/todos/\";\n\n// function fetchTodos() {\n//   return delay(2000)\n//     .then(() => fetch(url))\n//     .then((response) => response.json());\n// }\n// fetchTodos()\n//   .then((data) => console.log(data))\n//   .catch((err) => console.error(err));\n\n//создадим одну функцию, которая будет делать то же самое, но с применением async await\n\nasync function fetchAsyncTodos() {\n  try {\n    await delay(2000); // мы не перейдем к след строчке, пока данный промис не выполнится Эту\n    //функцию и выполняет оператор await\n    // в fetch(url) мы получаем респонс, поэтому записываем его в переменную\n    const response = await fetch(url); //результат работы оператора await\n    //дальше нам нужно выполнить еще один промис, который возвращает метод респонз\n    const data = await response.json();\n    return data;\n    // console.log(data);\n  } catch (e) {\n    console.error(e);\n  } finally {\n    console.log(\"выполнится в любом случае, даже если произошла ошибка\");\n  }\n}\n//функция, которая является асинхронной, всегда возвращает промис. Мы можем использовать метод then\nfetchAsyncTodos().then((dataInfo) => console.log(dataInfo));\n\n// Proxi - ловушки для объектов. Организуем ловушки и внутри них можем переписывать\n//базовый функционал\nconst larysa = {\n  name: \"Larysa\",\n  age: 44,\n  job: \"frontend\",\n};\n\nconst proxyLarysa = new Proxy(larysa, {\n  //ловушка на метод гет\n  get(target, prop) {\n    // console.log(\"target\", target); // наш объект\n    // console.log(\"prop\", prop); //название поля, к которому обращаемся\n    console.log(`getting prop:${prop}`);\n    return target[prop];\n  },\n  set(target, prop, value) {\n    if (prop in target) {\n      return (target[prop] = value);\n    } else {\n      throw new Error(`There is not ${prop} in ${target}`);\n    }\n  },\n  //метод has возвращает true ore false и говорит, есть ли такое поле в объекте\n  //наш объект может иметь только заданные 3 поля\n  has(target, prop) {\n    return [\"name\", \"age\", \"job\"].includes(prop); // возвращает true ore false\n  },\n\n  //удалять свойство из объета\n  deleteProperty(target, prop) {\n    delete target[prop];\n    return true;\n  },\n});\nconsole.log(proxyLarysa.name);\nproxyLarysa.age = 40;\nconsole.log(proxyLarysa);\nconsole.log(\"name\" in proxyLarysa); //проверяем метод has\ndelete proxyLarysa.age;\nconsole.log(proxyLarysa);\n\n//Proxy functions\nconst log = (text) => console.log(`Log: ${text}`);\nlog(\"Hello\");\n\nconst fnproxy = new Proxy(log, {\n  apply(target, thisArg, args) {\n    console.log(\"calling fn\");\n    //(target - сама функция, thisArg- ее контекст, args-массив аргументов, кот мы передали\n    //и тут мы можем преобразовывать, делать любые действия\n    // return target.apply(thisArg, args).toUpperCase();- не работает из-за вэбпака скорее всего\n  },\n});\nfnproxy(\"text\");\n\n// proxi классы и ключевое слово new\n\nclass Human {\n  constructor(name, age) {\n    this.name = name;\n    this.age = age;\n  }\n}\n\nconst Humanproxy = new Proxy(Human, {\n  //вторым параметром передаем объект и список хэндлеров\n  construct(target, args) {\n    console.log(\"construct ...\");\n    //перехватываем метод конструктора и возвращаем какую-то логику\n    //target является экземпляром класса Human\n    //...args это name, age\n    return new Proxy(target(...args), {\n      get(t, prop) {\n        console.log(`getting ${prop}`);\n        return t[prop];\n      },\n    });\n  },\n});\n// const p = new Humanproxy(\"Denis\", 20);\n// console.log(p.name); - не работает\n\n// генераторы\n\nfunction* strGenerator() {\n  //благодаря символу * есть доступ к спец ключевому слову внутри функции yield\n  yield \"h\";\n  yield \"e\";\n  yield \"l\";\n  yield \"l\";\n  yield \"o\";\n}\n\nconst str = strGenerator(); //это функция генератор, у кот есть метод next\nconsole.log(str.next()); // получаем объект и один из ключей -  \"h\";\n//если снова вызвать функцию  next, то получим объект со след буквой\nconsole.log(str.next());\n//если сразу обратиться к значению str.next().value\nconsole.log(str.next());\nconsole.log(str.next());\nconsole.log(str.next());\n//когда закончились yield и мы вызываем, то получаем value:undefind,done:true-\n//true означает, что генератор закончил цикл последов. операций и больше ничего в нем нет\nconsole.log(str.next());\n\nfunction* numberGen(n = 10) {\n  for (let i = 0; i < n; i++) {\n    yield i; //мы в цикле, но js не выдает сразу все значения, а по вызову\n  }\n}\nconst num = numberGen(7);\nconsole.log(num.next()); //0\nconsole.log(num.next()); //1\n//в этом и заключается смысл генераторов - порционно выдавать значения, пока done:true\n//что значит, что больше нет значений\n\n//Пример логики генераторов\n\n// const iterator = {\n//   gen(n = 10) {\n//     let i = 0;\n//     //чтобы возвращало все значения от 0 до 10 нужно вернуть next()\n//     return {\n//       next() {\n//         if (i < n) {\n//           return { value: ++i, done: false };\n//         }\n//         return { value: undefined, done: true };\n//       },\n//     };\n//   },\n// };\n// const itr = iterator.gen(5);\n// console.log(itr.next());\n// console.log(itr.next());\n// console.log(itr.next());\n// console.log(itr.next());\n// console.log(itr.next());\n// console.log(itr.next());\n//перепишем ее\n\nfunction* iter(n = 10) {\n  for (let i = 0; i < n; i++) {\n    yield i;\n  }\n} // в генераторе по умолчанию определен symbol.iterator, кот позволяет итерировать в цикле for of\n// дальше данный генератор вызвать в цикле for of\nfor (let num of iter(6)) {\n  console.log(num);\n}\n\n//Objects.entries(obj) - reverse Object.fromEntries(obj)\n\n//MAP - Карты\n\nconst obj = {\n  name: \"Larysa\",\n  age: 44,\n  ocupation: \"frontend\",\n};\nconst entries = Object.entries(obj);\n\nconst map = new Map(entries);\nconsole.log(map); // конструкция очень похожая на объект\n\n//метод get()\nconsole.log(map.get(\"ocupation\")); // = obj.ocupation\n// очень похоже на объект, но есть отличия - вызываем значения методами и в качестве\n//ключей можем указывать любые типы данных и они будут являться ключами\n\n//создадим новое значение\nmap\n  .set(\"newField\", 42) // ключ - строчка\n  .set(obj, \"this is object\") // ключ- объект\n  .set(NaN, \"is it NaN?\");\n// console.log(map);\n\n//Delete field - returns true(deleted) ore false(not deleted becouse there is no such field)\nmap.delete(\"ocupation\");\nconsole.log(map.has(\"ocupation\"));\n\n//сколько ключей в карте\nconsole.log(map.size);\n//очистить карту\n// map.clear();\n// console.log(map.size);\n// у карты есть символ-итератор, кот позволяет ее работать в цикле for of\n\n// for (let entry of map) {\n//   console.log(entry);\n// }\n\n// for (let [key, value] of map) {\n//   console.log(key, value);\n// }\n\n// итерация по значениям\n\n// for (let val of map.values()) {\n//   console.log(val);\n// }\n// итерация по ключам\n// for (let key of map.keys()) {\n//   console.log(key);\n// }\n// цикл forEach позволяет пробегать по всем его значениям\n// map.forEach((val, key, obj) => {\n//   console.log(val, key);\n// });\n\n//из карты можно быстро сделать массивы несколькими способами\n\n// const mapArray = Array.from(map)\nconst mapArray = [...map];\nconsole.log(mapArray);\n//карта - это усложненный объект- мы можем сделать объект из этой карты\n\nconst mapObj = Object.fromEntries(map.entries());\n\nconsole.log(mapObj); // но вместо ключа-объекта мы получаем [object object]\n//так как в обычных объектах ключами объекты не могут быть и поэтому js приводит\n//объект к строке методам toString() и получается \"[object object]\"\n\n//EXAMPLE MAP USAGE\n\nconst users = [{ name: \"Denis\" }, { name: \"Daryna\" }, { name: \"Alex\" }];\n//нужно для каждого пользователя записывать время, когда он посещал сайт или читал статью\n\nconst visitsMap = new Map();\nvisitsMap\n  .set(users[0], new Date())\n  .set(users[1], new Date(new Date().getTime() + 1000 * 60))\n  .set(users[1], new Date(new Date().getTime() + 5000 * 60));\n\n//создаю функцию и с помощью карты достаю его время посещения сайта\n\nfunction lastVisit(user) {\n  return visitsMap.get(user);\n}\nconsole.log(lastVisit(users[1]));\n\n//SET\nconst set = new Set([1, 2, 3, 3, 4, 5, 5, 6]);\nconsole.log(set); // возвращает значения в единственном экземпляре\n\n//методы\n// set.add(10).add(20).add(30).add(20);\n// console.log(set);\n// console.log(set.has(30));\n// console.log(set.size);\n// set.delete(30);\n// console.log(set);\n// // set.clear()\n// console.log(set.values());\n// console.log(set.keys()); // эти два метода выдают одно и то же, значения массива\n\n//можно пробегать циклом for of\n\n//\n//EXAMPLES\nfunction uniqueValues(array) {\n  return [...new Set(array)];\n}\nuniqueValues([1, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6]);\n\n//Weakmap\n// то же самое6 что и map, но меньше методов,если какое-то значение убирается сборщиком мусора- он автоматически\n//удаляется из Weakmap\n//с его помощью избегаем утечек данных в js\n\nlet weakObj = {\n  name: \"Weakmap\",\n};\n// const weakArray = [weakObj];\n// weakObj = null; // будет null в консоли,но в массиве он останется\n// console.log(weakObj);\n//но в картах, где ключи могут быть объектами, можно стереть их значение и будет утечка памяти\n//чтобы этого не было существует Weakmap\n//В Weakmap ключами могут быть только объекты\n\nconst newMap = new WeakMap([[weakObj, \"obj data\"]]);\nconsole.log(newMap);\n// methods get,set,delete,has, нет метода size\nconsole.log(newMap.has(weakObj));\nconsole.log(newMap.get(weakObj));\nweakObj = null;\nconsole.log(newMap.get(weakObj)); //undefind\n//EXAMPLES\n\n//нужно создать функцию, которая в кэш записывает пользователей\n\nconst cashe = new WeakMap();\nfunction casheUser(user) {\n  if (!cashe.has(user)) {\n    cashe.set(user, Date.now());\n  }\n  return cashe.get(user);\n}\n\nlet lena = {\n  name: \"Lena\",\n};\n\nlet alex = {\n  name: \"Alex\",\n};\ncasheUser(lena);\ncasheUser(alex);\nconsole.log(cashe);\nlena = null;\nconsole.log(cashe); // почистило и лены уже нет и память очищена, хотя напрямую я не трогала cashe\n\n//Weakset\n// то же самое6 что и set, но меньше методов\n//значения только объекты и если какой-то объект убирается сборщиком мусора- он автоматически\n//удаляется из Weakset\n\nconst users1 = [{ name: \"Den\" }, { name: \"Ben\" }, { name: \"Ashray\" }];\n\nconst visit = new WeakSet();\nvisit.add(users1[0]).add(users1[1]);\nconsole.log(visit);\n//можно пользоваться только методом has\nusers1.splice(1, 1);\nconsole.log(visit.has(users1[0]));\nconsole.log(visit.has(users1[1])); // автоматом он был удален из Weakset\n\n//fetch\n\nconst requestUrl = \"https://jsonplaceholder.typicode.com/users\";\n\nconst body = {\n  name: \"Larysa\",\n  age: 44,\n};\nfunction sendRequest(method, url, body = null) {\n  const headers = {\n    \"Content-Type\": \"application/json\",\n  };\n  // return fetch(url, {\n  //   method: method,\n  //   body: JSON.stringify(body),\n  //   headers: headers,\n  // }).then((response) => response.json()); //по умолчанию выполняется метод гет\n\n  if (body) {\n    return fetch(url, {\n      method: method,\n      body: JSON.stringify(body),\n      headers: headers,\n    }).then((response) => {\n      if (response.ok) {\n        return response.json();\n      }\n      throw new Error(error.statusText);\n    });\n  } else {\n    return fetch(url).then((response) => {\n      if (response.ok) {\n        return response.json();\n      }\n      throw new Error(error.statusText);\n    });\n  }\n}\n// sendRequest(\"GET\", requestUrl, null)\n//   .then((data) => console.log(data))\n//   .catch((err) => console.log(err));\n\nsendRequest(\"POST\", requestUrl, body)\n  .then((data) => console.log(data))\n  .catch((err) => console.log(err));\n\n//Local storage работает только со стороками!!!\n//Applocation=> storage => localStorage\n//localStorage.setItem('key', 'value')\n//localStorage.getItem('key')\n//localStorage.removeItem('key')\n//localStorage.clear() - remove everything\n//чем отличается localStorage от cokees - он намного больше(localStorage размер 5 мегабайт)\n//cokees улетают вместе с запросами на сервер и сервер может их распарсить. localStorage - нет\n\n//OBJECTS ES6\n\nconst city = \"city\";\nconst job = \"frontend\";\n\nconst adress = {\n  [city]: \"Kiev\",\n  job,\n  getAddress() {\n    console.log(`I am ${this.job} dev`, this);\n  },\n  toString() {\n    return Object.keys(this)\n      .filter((key) => key !== \"toString\" && key !== \"getAddress\")\n      .map((key) => this[key])\n      .join(\" \");\n  },\n};\n// console.log(adress);\nconsole.log(adress.toString()); // выводятся функции, которых быть не должно\n//для этого добавляем метод filter\n\n//methods\nconst first = { a: 1 };\nconst second = { b: 2 };\n\n//сравнить на эквивалентность\n// console.log(Object.is(20, 20)); //true\n// console.log(Object.is(10, 20)); //false\n\n//\n// console.log(Object.assign({}, first, second)); // new object\n// console.log(first, second); // haven't changed\n\nfunction add(...args) {\n  return args.reduce((acc, arg) => acc + arg, 0);\n}\nconsole.log(add(1, 3, 4));\n\n//SIMBOL абсолютно уникальные\nconst symbol = Symbol(\"demo\");\nconst anotherSimbol = Symbol(\"demo\");\n\nconsole.log(symbol === anotherSimbol); // false\n//их предназначение - динамические ключи в объектах\n\nconst objec = {\n  name: \"Denis\",\n  [symbol]: \"meta\",\n};\n// console.log(objec[symbol]); //meta\n//эти поля скрыты, то есть если пробежаться циклом по объекту,который бежит и по собсьвенным\n//полям и по прототипу\nfor (let key in objec) {\n  console.log(key); // symbol not visible in the loop\n}\n//символы нужны для задания мета данных и для того, чтобы их использовать\n\n//Interview\n\n/*\nтипы данных\nnull, underfind, boolean, number, string, object, symbol\nвсе примитивные, кроме object\n*/\n\n//FALSY: '', 0, underfind, null, NaN, false\n//пустой объект, массив или функция выдают по приведению типов true\n\n// == vs ===\n// == -сравнивает с приведением типов, === - сравнивает без приведения типов\n\n// console.log(2 == \"2\"); // true\n// console.log(2 === \"2\"); //false\n// console.log(undefined == null); //true\n// console.log(undefined === null); //false\nconsole.log(\"0\" == false); //true\nconsole.log(\"0\" == 0); //true\nconsole.log(false == \"\"); //true\nconsole.log(false == []); //true\nconsole.log(false == {}); //false\nconsole.log(\"\" == 0); //true\nconsole.log(\"\" == []); //true\nconsole.log(\"\" == {}); //false\nconsole.log(0 == []); //true\nconsole.log(0 == {}); //false\nconsole.log(0 == null); //false\n\n//HOISTING\n\n//let & const не поднимаются\n\n// console.log(i); //underfind, not an error,\n// var i = 42;\n// console.log(y); // error\n// const y = 40;\n\n//function expression and function declaration\n\n//function declaration\n// console.log(square(25)); // можем вызывать до того, как мы их объявили\n// function square(num) {\n//   return num ** 2; // возвести во 2 степень\n// }\n//function expression - error можно использовать только после объявления\n// const square = function (num) {\n//   return num ** 2;\n// };\n\n//IIfe immediate invoked function expression - моментально выполняется\n//используются для создания локального scope\n\nfunction addFive(num) {\n  return function (num2) {\n    return num + num2;\n  };\n}\n\nconst addAll = addFive(5);\n\nconsole.log(addAll(2));\n"],"sourceRoot":""}